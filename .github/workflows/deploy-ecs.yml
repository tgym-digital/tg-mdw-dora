name: Deploy to Cross-Account ECS

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      push_only:
        description: 'Push image only (skip deployment)'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug variables
        run: |
          echo "SERVICES_AWS_ROLE: ${{ vars.SERVICES_AWS_ROLE }}"
          echo "UTILITIES_AWS_ROLE: ${{ vars.UTILITIES_AWS_ROLE }}"
          echo "SERVICES_AWS_REGION: ${{ vars.SERVICES_AWS_REGION }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 1: Configure AWS credentials for DIGITAL account (ECR push)
      - name: Configure AWS credentials for Digital Account (ECR)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::931900621347:role/github-actions-services-role"
          role-session-name: "tg-mdw-dora-digital@${{ github.run_number }}"
          aws-region: ${{ vars.SERVICES_AWS_REGION || 'eu-west-1' }}

      - name: Build and Push Docker Image to Digital ECR
        env:
          AWS_REGION: ${{ vars.SERVICES_AWS_REGION || 'eu-west-1' }}
          BUILD_DATE: ${{ github.event.head_commit.timestamp }}
        run: |
          # get short commit sha for traceability
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          
          # login to ECR in digital account
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin 931900621347.dkr.ecr.eu-west-1.amazonaws.com
          
          # build and tag images
          docker build -f Dockerfile.ecs \
            --build-arg BUILD_DATE="$BUILD_DATE" \
            --build-arg MERGE_COMMIT_SHA="${{ github.sha }}" \
            -t 931900621347.dkr.ecr.eu-west-1.amazonaws.com/mwcloud-utils/tg-mdw-dora:${{ github.sha }} \
            -t 931900621347.dkr.ecr.eu-west-1.amazonaws.com/mwcloud-utils/tg-mdw-dora:${{ github.sha }}-$SHORT_SHA \
            -t 931900621347.dkr.ecr.eu-west-1.amazonaws.com/mwcloud-utils/tg-mdw-dora:latest .
          
          # push images
          docker push 931900621347.dkr.ecr.eu-west-1.amazonaws.com/mwcloud-utils/tg-mdw-dora:${{ github.sha }}
          docker push 931900621347.dkr.ecr.eu-west-1.amazonaws.com/mwcloud-utils/tg-mdw-dora:${{ github.sha }}-$SHORT_SHA
          docker push 931900621347.dkr.ecr.eu-west-1.amazonaws.com/mwcloud-utils/tg-mdw-dora:latest

      # Skip deployment if push_only is true
      - name: Push only - Skip deployment
        if: ${{ github.event.inputs.push_only == 'true' }}
        run: |
          echo "✅ Image pushed successfully to ECR!"
          echo "📦 Repository: mwcloud-utils/tg-mdw-dora"
          echo "🏷️  Tags: ${{ github.sha }}, ${{ github.sha }}-$SHORT_SHA, latest"
          echo "🚫 Deployment skipped as requested"

      # Step 2: Configure AWS credentials for UTILITIES account (ECS deployment)
      - name: Configure AWS credentials for Utilities Account (ECS)
        if: ${{ github.event.inputs.push_only != 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.UTILITIES_AWS_ROLE }}
          role-session-name: "tg-mdw-dora-utilities@${{ github.run_number }}"
          aws-region: ${{ vars.SERVICES_AWS_REGION || 'eu-west-1' }}

      - name: Generate ECS Task Definition
        if: ${{ github.event.inputs.push_only != 'true' }}
        run: |
          cat > task-definition.json << 'EOF'
          {
            "family": "tg-mdw-dora-task",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "2048",
            "memory": "4096",
            "executionRoleArn": "arn:aws:iam::992382793490:role/ecsTaskExecutionRole",
            "taskRoleArn": "arn:aws:iam::992382793490:role/ecsTaskRole",
            "containerDefinitions": [
              {
                "name": "tg-mdw-dora-container",
                "image": "931900621347.dkr.ecr.eu-west-1.amazonaws.com/mwcloud-utils/tg-mdw-dora:${{ github.sha }}",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 3333,
                    "protocol": "tcp"
                  },
                  {
                    "containerPort": 9696,
                    "protocol": "tcp"
                  },
                  {
                    "containerPort": 9697,
                    "protocol": "tcp"
                  }
                ],
                "environment": [
                  {
                    "name": "ENVIRONMENT",
                    "value": "prod"
                  },
                  {
                    "name": "DB_HOST",
                    "value": "localhost"
                  },
                  {
                    "name": "DB_NAME",
                    "value": "mhq-oss"
                  },
                  {
                    "name": "DB_USER",
                    "value": "postgres"
                  },
                  {
                    "name": "DB_PORT",
                    "value": "5434"
                  },
                  {
                    "name": "REDIS_HOST",
                    "value": "localhost"
                  },
                  {
                    "name": "REDIS_PORT",
                    "value": "6385"
                  },
                  {
                    "name": "PORT",
                    "value": "3333"
                  },
                  {
                    "name": "ANALYTICS_SERVER_PORT",
                    "value": "9696"
                  },
                  {
                    "name": "SYNC_SERVER_PORT",
                    "value": "9697"
                  },
                  {
                    "name": "INTERNAL_API_BASE_URL",
                    "value": "http://localhost:9696"
                  },
                  {
                    "name": "INTERNAL_SYNC_API_BASE_URL",
                    "value": "http://localhost:9697"
                  },
                  {
                    "name": "NEXT_PUBLIC_APP_ENVIRONMENT",
                    "value": "prod"
                  },
                  {
                    "name": "BUILD_DATE",
                    "value": "${{ github.event.head_commit.timestamp }}"
                  },
                  {
                    "name": "MERGE_COMMIT_SHA",
                    "value": "${{ github.sha }}"
                  }
                ],
                "secrets": [
                  {
                    "name": "DB_PASS",
                    "valueFrom": "arn:aws:secretsmanager:eu-west-1:992382793490:secret:tg-mdw-dora/db-password"
                  }
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/tg-mdw-dora",
                    "awslogs-region": "eu-west-1",
                    "awslogs-stream-prefix": "ecs"
                  }
                },
                "mountPoints": [
                  {
                    "sourceVolume": "postgres-data",
                    "containerPath": "/efs/postgres_data",
                    "readOnly": false
                  },
                  {
                    "sourceVolume": "config-data",
                    "containerPath": "/efs/config",
                    "readOnly": false
                  },
                  {
                    "sourceVolume": "logs-data",
                    "containerPath": "/efs/logs",
                    "readOnly": false
                  }
                ]
              }
            ],
            "volumes": [
              {
                "name": "postgres-data",
                "efsVolumeConfiguration": {
                  "fileSystemId": "${{ secrets.EFS_FILE_SYSTEM_ID }}",
                  "rootDirectory": "/postgres-data",
                  "transitEncryption": "ENABLED",
                  "authorizationConfig": {
                    "iam": "ENABLED"
                  }
                }
              },
              {
                "name": "config-data",
                "efsVolumeConfiguration": {
                  "fileSystemId": "${{ secrets.EFS_FILE_SYSTEM_ID }}",
                  "rootDirectory": "/config-data",
                  "transitEncryption": "ENABLED",
                  "authorizationConfig": {
                    "iam": "ENABLED"
                  }
                }
              },
              {
                "name": "logs-data",
                "efsVolumeConfiguration": {
                  "fileSystemId": "${{ secrets.EFS_FILE_SYSTEM_ID }}",
                  "rootDirectory": "/logs-data",
                  "transitEncryption": "ENABLED",
                  "authorizationConfig": {
                    "iam": "ENABLED"
                  }
                }
              }
            ]
          }
          EOF

      - name: Deploy to ECS and Wait for Stability
        if: ${{ github.event.inputs.push_only != 'true' }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: task-definition.json
          service: tg-mdw-dora
          cluster: mwcloud-tools
          wait-for-service-stability: true

      - name: Verify deployment
        if: ${{ github.event.inputs.push_only != 'true' }}
        run: |
          echo "✅ Deployment completed successfully!"
          echo "🎯 Service: tg-mdw-dora"
          echo "🏗️  Cluster: mwcloud-tools"
          echo "🐳 Image: 931900621347.dkr.ecr.eu-west-1.amazonaws.com/mwcloud-utils/tg-mdw-dora:${{ github.sha }}" 